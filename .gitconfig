[user]
	name = Marcos Ojeda
	email = subliminal@gmail.com

[color]
  ui = true

[branch]
  autosetupmerge = always
  autosetuprebase = always

[alias]
  unstage = reset HEAD --
  st = status

  wip = commit -am \"WIP\"
  unwip = reset HEAD^

  # use to bypass diff so fancy
  patch = !git --no-pager diff --no-color

  co = "!f() { git checkout $* && git submodule update --init --recursive; }; f"
  p = !sh -c 'git pull $* && git submodule update --init --recursive' --
  m = "!f() { git merge \"$@\" && git submodule update --init --recursive; }; f"
  squish = "!f() { git status && git commit -a --amend -C HEAD; }; f"
  smoosh = "!f() { git status && git commit -a --amend --no-edit -C HEAD; }; f"
  unsquish = reset --soft HEAD@{1}
  weekly = !sh -c 'git log --author=$USER --since=`gdate -d last\\ monday +%Y/%m/%d`'
  recent="!git for-each-ref --sort=-committerdate --count=10 --format='%(refname:short)' refs/heads/"

  # Sense aliases
  next-release = "!f() { echo \"$(aws s3 cp s3://deploy.sense/IN_PROGRESS -)\"; }; f"
  in-production = "!f() { echo \"$(aws s3 cp s3://deploy.sense/IN_PRODUCTION -)\"; }; f"
  rebase-production = "!f() { TARGET=$(aws s3 cp s3://deploy.sense/IN_PRODUCTION -); echo "Rebasing against ${TARGET}"; git fetch --all; git rebase -i \"origin/$TARGET\"; }; f"
  rebase-next-release = "!f() { TARGET=$(aws s3 cp s3://deploy.sense/IN_PROGRESS -); echo "Rebasing against ${TARGET}"; git fetch --all; git rebase -i \"origin/$TARGET\"; }; f"
  create-pr = "!f() { TARGET=$(aws s3 cp s3://deploy.sense/IN_PROGRESS -); CURR=$(git rev-parse --abbrev-ref HEAD); LINK=\"https://github.com/Spaced-Out/sense/compare/${TARGET}...${CURR}?expand=1\"; echo \"PR Link: ${LINK}\"; open $LINK; }; f"
  hotfix = "!f() { TARGET=$(aws s3 cp s3://deploy.sense/IN_PRODUCTION -); hub pull-request -b ${TARGET}; }; f"
  sopr = "!f() { TARGET=$(aws s3 cp s3://deploy.sense/IN_PROGRESS -); hub pull-request -b ${TARGET}; }; f"

  # most recent branches at bottom
  fresh = branch -vv --sort=-committerdate
  chris = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
  # get commit / resolved branch for current prod deploy
  deployed = "!f() { DEPLOYED=$(curl -s https://system.sensehq.com/api/v1/system/version | jq -r '.version'); git fetch --all --quiet; git name-rev \"$DEPLOYED\"; }; f"
  me-deployed = "!f() { DEPLOYED=$(curl -s https://webapp-system.sensehq.com/api/v1/system/version | jq -r '.version'); git fetch --all --quiet; git name-rev \"$DEPLOYED\"; }; f"

  # taken from https://ses4j.github.io/2020/04/01/git-alias-recent-branches/
  memento = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf(\"  \\033[33m%s: \\033[37m %s\\033[0m\\n\", substr($2, 1, length($2)-1), $1)}


[credential]
  helper = osxkeychain

[push]
  default = current

[core]
  excludesfile = /Users/marcos/.gitignore_global
  editor = vim -f
  # editor = subl -n -w

[merge]
  keepBackup = false;
  tool = p4merge

[mergetool "p4merge"]
  cmd = ~/Applications/p4merge.app/Contents/Resources/launchp4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
  keepTemporaries = false
  trustExitCode = false
  keepBackup = false

# presumably added by github.app
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[pager]
  show = diff-so-fancy | less --tabs=4 -RFX
  diff = diff-so-fancy | less --tabs=4 -RFX --pattern '^(Date|added|deleted|modified): '

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[commit]
	verbose = true
[diff-so-fancy]
	stripLeadingSymbols = false
